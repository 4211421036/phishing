name: Build C Project
on:
  schedule:
    - cron: '*/5 * * * *' # Menjalankan setiap 5 menit
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
    # Langkah 1: Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Langkah 2: Install Chocolatey
    - name: Install Chocolatey
      shell: pwsh
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
        Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

    # Langkah 3: Install MinGW menggunakan Chocolatey
    - name: Install MinGW
      shell: pwsh
      run: |
        choco install -y mingw gtk3 curl json-c

    # Langkah 4: Set PATH untuk MinGW
    - name: Setup Environment
      shell: pwsh
      run: |
        # Add MinGW to PATH
        echo "C:\tools\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # Set PKG_CONFIG_PATH for GTK
        $env:PKG_CONFIG_PATH = "C:\tools\gtk3\lib\pkgconfig"
        echo "PKG_CONFIG_PATH=$env:PKG_CONFIG_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    # Langkah 5: Kompilasi resource file
    - name: Compile resource file
      shell: pwsh
      run: |
        windres -i resource.rc -o resource.o
        if (Test-Path resource.o) {
          Write-Host "Resource file compiled successfully"
        } else {
          Write-Host "Resource file compilation failed"
          exit 1
        }

    - name: Compile Application
      shell: pwsh
      run: |
        gcc main.c -o phishing.exe `
          -IC:/tools/gtk3/include/gtk-3.0 `
          -IC:/tools/gtk3/include/glib-2.0 `
          -IC:/tools/gtk3/lib/glib-2.0/include `
          -LC:/tools/gtk3/lib `
          -lgtk-3 -lgobject-2.0 -lglib-2.0 `
          -lcurl -ljson-c `
          -mwindows -Wl,-subsystem,windows
    
    # Langkah 6: Kompilasi program C
    - name: Compile C code
      shell: pwsh
      run: |
        gcc main.c resource.o -o phishing.exe -lm
        if (Test-Path phishing.exe) {
          Write-Host "phishing.exe created successfully"
        } else {
          Write-Host "Failed to create phishing.exe"
          exit 1
        }

    # Langkah 7: Install Resource Hacker
    - name: Install Resource Hacker
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "http://www.angusj.com/resourcehacker/resource_hacker.zip" -OutFile "reshacker.zip"
        Expand-Archive -Path "reshacker.zip" -DestinationPath "reshacker"

    # Langkah 10: Simpan output sebagai artifact
    - name: Create artifacts directory
      shell: pwsh
      run: |
        New-Item -Path "${{ github.workspace }}\artifacts" -ItemType Directory -Force
        Copy-Item -Path "phishing.exe" -Destination "${{ github.workspace }}\artifacts\" -Force

    # Langkah 11: Commit dan push file phishing.exe ke repositori
    - name: Commit and Push phishing.exe
      shell: pwsh
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        New-Item -Path "build" -ItemType Directory -Force
        Copy-Item -Path "phishing.exe" -Destination "build\phishing.exe" -Force
        git add build/phishing.exe
        $hasChanges = git diff --cached --quiet
        if ($LASTEXITCODE -ne 0) {
          git commit -m "Auto-commit: Add compiled phishing.exe"
          git push
        } else {
          Write-Host "No changes to commit"
        }

    - name: Create Release Body
      id: release_body
      shell: pwsh
      run: |
        $body = @"
        ## Entropy-Based Malicious File Detection
        
        ### Implemented Algorithms
        
        **Shannon Entropy**:
        $$ H_{\theta}(x) = \sum_{i=1}^{n} p(x_i) \log_{\theta} \frac{1}{p(x_i)} $$
        
        **Renyi Entropy**:
        $$ H_{\theta}(x) = \frac{1}{1-\theta} \log_{\theta} \left(\sum_{i=1}^{n} p(x_i)^\theta\right) $$
        
        **Tsallis Entropy**:
        $$ H_{\theta}(x) = \frac{1}{1-\theta} \left(\sum_{i=1}^{n} p(x_i)^\theta - 1\right) $$
        
        ### Key Features
        - Hybrid entropy analysis (Shannon + Renyi + Tsallis)
        - Header entropy validation (256 bytes)
        - Ransomware pattern detection
        - GUI interface with GTK
        - Auto-update mechanism
        
        Based on: *Entropy Based Method for Malicious File Detection*  
        Journal of Informatics Visualization, 6(4) 856-861
        "@
        echo "body=$body" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: phishing.exe
        body: ${{ steps.release_body.outputs.body }}
        tag_name: ${{ github.ref }}
        name: "v${{ github.ref_name }} Release"
