name: Build and Release C Project

on:
  schedule:
    - cron: '0 */6 * * *' # Diubah menjadi setiap 6 jam untuk mengurangi beban
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Dependencies
      shell: pwsh
      run: |
        # Install Chocolatey
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        
        # Install build tools and GTK using Chocolatey
        choco install -y mingw curl
        choco install -y msys2
        refreshenv
        
        # Install GTK3 using MSYS2
        C:\tools\msys64\usr\bin\bash.exe -lc "pacman -S --noconfirm mingw-w64-x86_64-gtk3"
        
        # Install vcpkg and json-c
        choco install -y vcpkg
        vcpkg install json-c:x64-windows

    - name: Setup Environment
      shell: pwsh
      run: |
        # Add MinGW to PATH
        echo "C:\tools\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # Add MSYS2/MinGW GTK paths
        echo "C:\tools\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\tools\msys64\mingw64\include" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\tools\msys64\mingw64\lib" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # Add vcpkg paths
        echo "C:\vcpkg\installed\x64-windows\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\vcpkg\installed\x64-windows\include" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\vcpkg\installed\x64-windows\lib" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # Set GTK environment variables
        $gtkDir = "C:\tools\msys64\mingw64"
        echo "GTK_DIR=$gtkDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "GTK_INCLUDE=$gtkDir\include\gtk-3.0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "GLIB_INCLUDE=$gtkDir\include\glib-2.0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "GLIB_LIB_INCLUDE=$gtkDir\lib\glib-2.0\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "GTK_LIB_DIR=$gtkDir\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
        # Set PKG_CONFIG_PATH
        $env:PKG_CONFIG_PATH = "$gtkDir\lib\pkgconfig"
        echo "PKG_CONFIG_PATH=$env:PKG_CONFIG_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Verify GTK Installation
      shell: pwsh
      run: |
        # Check for GTK files
        $gtkHeader = "${{ env.GTK_INCLUDE }}\gtk\gtk.h"
        if (Test-Path $gtkHeader) {
          Write-Host "GTK headers found at $gtkHeader"
        } else {
          Write-Host "GTK headers not found at $gtkHeader"
          Write-Host "Listing GTK directory contents:"
          Get-ChildItem -Path "${{ env.GTK_DIR }}" -Recurse -Depth 2 -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_.FullName }
          exit 1
        }
        
        # Check for libraries
        $gtkLib = "${{ env.GTK_LIB_DIR }}\libgtk-3.dll.a"
        if (Test-Path $gtkLib) {
          Write-Host "GTK library found at $gtkLib"
        } else {
          Write-Host "GTK library not found at $gtkLib"
          Write-Host "Listing lib directory:"
          Get-ChildItem -Path "${{ env.GTK_LIB_DIR }}" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_.FullName }
          exit 1
        }

    - name: Compile resource file
      shell: pwsh
      run: |
        Write-Host "Working directory: $(Get-Location)"
        Write-Host "Files in directory:"
        Get-ChildItem -Path "." | ForEach-Object { Write-Host $_.FullName }
        
        windres -i resource.rc -o resource.o
        if (Test-Path resource.o) {
          Write-Host "Resource file compiled successfully"
        } else {
          Write-Host "Resource file compilation failed"
          exit 1
        }

    - name: Compile Application
      shell: pwsh
      run: |
        Write-Host "Working directory: $(Get-Location)"
        
        # Tambahkan path GTK bin ke PATH untuk memudahkan link dinamis
        $env:PATH += ";${{ env.GTK_DIR }}\bin;C:\vcpkg\installed\x64-windows\bin"
        
        # Dapatkan daftar file header dan library
        Write-Host "GTK Include directory content:"
        Get-ChildItem -Path "${{ env.GTK_INCLUDE }}" -Recurse -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_.FullName }
        
        # Compile dengan verbose output
        $compileCommand = @"
        gcc main.c resource.o -o build/phishing.exe `
        -I"${{ env.GTK_INCLUDE }}" `
        -I"${{ env.GLIB_INCLUDE }}" `
        -I"${{ env.GLIB_LIB_INCLUDE }}" `
        -I"C:\vcpkg\installed\x64-windows\include" `
        -I"${{ env.GTK_DIR }}\include\cairo" `
        -I"${{ env.GTK_DIR }}\include\pango-1.0" `
        -I"${{ env.GTK_DIR }}\include\atk-1.0" `
        -I"${{ env.GTK_DIR }}\include\gdk-pixbuf-2.0" `
        -L"${{ env.GTK_LIB_DIR }}" `
        -L"C:\vcpkg\installed\x64-windows\lib" `
        -lgtk-3 -lgobject-2.0 -lglib-2.0 -lgio-2.0 -lgdk-3 -lgdk_pixbuf-2.0 `
        -lcairo -lpango-1.0 -lpangocairo-1.0 -lcurl -ljson-c `
        -mwindows -Wl,-subsystem,windows
        "@
        
        Write-Host "Compile command: $compileCommand"
        
        # Buat direktori build jika belum ada
        if (-not (Test-Path "build")) {
            New-Item -Path "build" -ItemType Directory -Force
        }
        
        # Jalankan perintah kompilasi
        try {
            Invoke-Expression $compileCommand 2>&1 | Tee-Object -Variable result
            Write-Host "Compilation result: $result"
            
            if (Test-Path "build/phishing.exe") {
                Write-Host "phishing.exe created successfully in build directory"
                # Buat salinan di direktori utama untuk kompatibilitas dengan langkah berikutnya
                Copy-Item -Path "build/phishing.exe" -Destination "phishing.exe" -Force
            }
            else {
                Write-Host "Failed to create phishing.exe"
                exit 1
            }
        } catch {
            Write-Host "Compilation failed with error: $_"
            exit 1
        }

    - name: Create artifacts directory
      shell: pwsh
      run: |
        # Buat direktori artifacts jika belum ada
        New-Item -Path "${{ github.workspace }}\artifacts" -ItemType Directory -Force
        
        # Salin phishing.exe ke artifacts
        if (Test-Path "build/phishing.exe") {
            Copy-Item -Path "build/phishing.exe" -Destination "${{ github.workspace }}\artifacts\" -Force
            Write-Host "Copied phishing.exe to artifacts directory"
        }
        elseif (Test-Path "phishing.exe") {
            Copy-Item -Path "phishing.exe" -Destination "${{ github.workspace }}\artifacts\" -Force
            Write-Host "Copied phishing.exe to artifacts directory"
        }
        else {
            Write-Host "Cannot find phishing.exe to copy to artifacts"
            exit 1
        }

    - name: Commit and Push phishing.exe
      shell: pwsh
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        
        # Pastikan file ada
        if (Test-Path "build/phishing.exe") {
            # Add the file to git
            git add build/phishing.exe
            
            # Check if there are changes to commit
            $status = git status --porcelain
            if ($status) {
                git commit -m "Auto-commit: Add compiled phishing.exe"
                git push
                Write-Host "Committed and pushed phishing.exe"
            } else {
                Write-Host "No changes to commit"
            }
        } else {
            Write-Host "phishing.exe not found in build directory"
            exit 1
        }

    - name: Create Release Body
      id: release_body
      shell: pwsh
      run: |
        $body = @"
        ## Entropy-Based Malicious File Detection
        
        ### Implemented Algorithms
        
        **Shannon Entropy**:
        $$ H_{\theta}(x) = \sum_{i=1}^{n} p(x_i) \log_{\theta} \frac{1}{p(x_i)} $$
        
        **Renyi Entropy**:
        $$ H_{\theta}(x) = \frac{1}{1-\theta} \log_{\theta} \left(\sum_{i=1}^{n} p(x_i)^\theta\right) $$
        
        **Tsallis Entropy**:
        $$ H_{\theta}(x) = \frac{1}{1-\theta} \left(\sum_{i=1}^{n} p(x_i)^\theta - 1\right) $$
        
        ### Key Features
        - Hybrid entropy analysis (Shannon + Renyi + Tsallis)
        - Header entropy validation (256 bytes)
        - Ransomware pattern detection
        - GUI interface with GTK
        - Auto-update mechanism
        
        Based on: *Entropy Based Method for Malicious File Detection*  
        Journal of Informatics Visualization, 6(4) 856-861
        "@
        
        $escapedBody = $body -replace '%', '%25' -replace "`n", '%0A' -replace "`r", '' -replace '`', "''"
        echo "body=$escapedBody" >> $env:GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: build/phishing.exe
        body: ${{ steps.release_body.outputs.body }}
        tag_name: ${{ github.ref }}
        name: "v${{ github.ref_name }} Release"
