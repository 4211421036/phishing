name: Build and Release C Project

on:
  schedule:
    - cron: '*/5 * * * *' # Menjalankan setiap 1 menit, sesuaikan dengan kebutuhan Anda.
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Dependencies
      shell: pwsh
      run: |
        # Install Chocolatey
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        
        # Install build tools
        choco install -y mingw curl
        choco install -y --pre gtk3
        choco install -y vcpkg
        vcpkg install json-c

    - name: Setup Environment
      shell: pwsh
      run: |
        # Add MinGW to PATH
        echo "C:\tools\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # Set PKG_CONFIG_PATH for GTK
        $env:PKG_CONFIG_PATH = "C:\tools\gtk3\lib\pkgconfig"
        echo "PKG_CONFIG_PATH=$env:PKG_CONFIG_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

        # Add vcpkg to PATH
        echo "C:\vcpkg\installed\x64-windows\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\vcpkg\installed\x64-windows\include" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\vcpkg\installed\x64-windows\lib" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

        # Add GTK to PATH
        echo "C:\tools\gtk3\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Verify GTK Installation
      shell: pwsh
      run: |
        # Check if GTK headers are installed
        if (Test-Path "C:\tools\gtk3\include\gtk-3.0\gtk\gtk.h") {
          Write-Host "GTK headers found"
        } else {
          Write-Host "GTK headers not found"
          exit 1
        }

    - name: Compile resource file
      shell: pwsh
      run: |
        windres -i resource.rc -o resource.o
        if (Test-Path resource.o) {
          Write-Host "Resource file compiled successfully"
        } else {
          Write-Host "Resource file compilation failed"
          exit 1
        }

    - name: Compile Application
      shell: cmd
      run: |
        gcc main.c resource.o -o phishing.exe ^
          -IC:/tools/gtk3/include/gtk-3.0 ^
          -IC:/tools/gtk3/include/glib-2.0 ^
          -IC:/tools/gtk3/lib/glib-2.0/include ^
          -LC:/tools/gtk3/lib ^
          -LC:/vcpkg/installed/x64-windows/lib ^
          -LC:/tools/gtk3/bin ^
          -lgtk-3 -lgobject-2.0 -lglib-2.0 ^
          -lcurl -ljson-c ^
          -mwindows -Wl,-subsystem,windows

        if exist phishing.exe (
          echo phishing.exe created successfully
        ) else (
          echo Failed to create phishing.exe
          exit /b 1
        )

    - name: Create artifacts directory
      shell: pwsh
      run: |
        New-Item -Path "${{ github.workspace }}\artifacts" -ItemType Directory -Force
        Copy-Item -Path "phishing.exe" -Destination "${{ github.workspace }}\artifacts\" -Force

    - name: Commit and Push phishing.exe
      shell: pwsh
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        
        # Create build directory if it doesn't exist
        New-Item -Path "build" -ItemType Directory -Force
        
        # Copy the compiled executable to the build directory
        Copy-Item -Path "phishing.exe" -Destination "build\phishing.exe" -Force
        
        # Add the file to git
        git add build/phishing.exe
        
        # Check if there are changes to commit
        $hasChanges = git diff --cached --quiet
        if ($LASTEXITCODE -ne 0) {
          git commit -m "Auto-commit: Add compiled phishing.exe"
          git push
        } else {
          Write-Host "No changes to commit"
        }

    - name: Create Release Body
      id: release_body
      shell: pwsh
      run: |
        $body = @"
        ## Entropy-Based Malicious File Detection
        
        ### Implemented Algorithms
        
        **Shannon Entropy**:
        $$ H_{\theta}(x) = \sum_{i=1}^{n} p(x_i) \log_{\theta} \frac{1}{p(x_i)} $$
        
        **Renyi Entropy**:
        $$ H_{\theta}(x) = \frac{1}{1-\theta} \log_{\theta} \left(\sum_{i=1}^{n} p(x_i)^\theta\right) $$
        
        **Tsallis Entropy**:
        $$ H_{\theta}(x) = \frac{1}{1-\theta} \left(\sum_{i=1}^{n} p(x_i)^\theta - 1\right) $$
        
        ### Key Features
        - Hybrid entropy analysis (Shannon + Renyi + Tsallis)
        - Header entropy validation (256 bytes)
        - Ransomware pattern detection
        - GUI interface with GTK
        - Auto-update mechanism
        
        Based on: *Entropy Based Method for Malicious File Detection*  
        Journal of Informatics Visualization, 6(4) 856-861
        "@
        echo "body=$body" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: phishing.exe
        body: ${{ steps.release_body.outputs.body }}
        tag_name: ${{ github.ref }}
        name: "v${{ github.ref_name }} Release"
