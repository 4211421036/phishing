name: Build and Release C Project

on:
  schedule:
    - cron: '0 */6 * * *'
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Dependencies
      shell: pwsh
      run: |
        # Install Chocolatey
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        
        # Install build tools and GTK using Chocolatey
        choco install -y mingw curl
        choco install -y msys2
        refreshenv
        
        # Install GTK3 using MSYS2
        C:\tools\msys64\usr\bin\bash.exe -lc "pacman -S --noconfirm mingw-w64-x86_64-gtk3"
        
        # Install vcpkg and json-c
        choco install -y vcpkg
        vcpkg install json-c

    - name: Setup Environment
      shell: pwsh
      run: |
        # Add MinGW to PATH
        echo "C:\tools\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # Add MSYS2/MinGW GTK paths
        echo "C:\tools\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\tools\msys64\mingw64\include" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\tools\msys64\mingw64\lib" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # Add vcpkg paths
        echo "C:\vcpkg\installed\x64-windows\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\vcpkg\installed\x64-windows\include" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\vcpkg\installed\x64-windows\lib" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # Set GTK environment variables
        $gtkDir = "C:\tools\msys64\mingw64"
        echo "GTK_DIR=$gtkDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "GTK_INCLUDE=$gtkDir\include\gtk-3.0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "GLIB_INCLUDE=$gtkDir\include\glib-2.0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "GLIB_LIB_INCLUDE=$gtkDir\lib\glib-2.0\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "GTK_LIB_DIR=$gtkDir\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
        # Set PKG_CONFIG_PATH
        $env:PKG_CONFIG_PATH = "$gtkDir\lib\pkgconfig"
        echo "PKG_CONFIG_PATH=$env:PKG_CONFIG_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Verify GTK Installation
      shell: pwsh
      run: |
        # Check for GTK files
        $gtkHeader = "${{ env.GTK_INCLUDE }}\gtk\gtk.h"
        if (Test-Path $gtkHeader) {
          Write-Host "GTK headers found at $gtkHeader"
        } else {
          Write-Host "GTK headers not found at $gtkHeader"
          Write-Host "Listing GTK directory contents:"
          Get-ChildItem -Path "${{ env.GTK_DIR }}" -Recurse -Depth 2 -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_.FullName }
          exit 1
        }
        
        # Check for libraries
        $gtkLib = "${{ env.GTK_LIB_DIR }}\libgtk-3.dll.a"
        if (Test-Path $gtkLib) {
          Write-Host "GTK library found at $gtkLib"
        } else {
          Write-Host "GTK library not found at $gtkLib"
          Write-Host "Listing lib directory:"
          Get-ChildItem -Path "${{ env.GTK_LIB_DIR }}" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_.FullName }
          exit 1
        }

    - name: Create resource.rc if not exists
      shell: pwsh
      run: |
        if (-not (Test-Path "resource.rc")) {
          @"
// Microsoft Visual C++ generated resource script.
//
#include <windows.h>

VS_VERSION_INFO VERSIONINFO
 FILEVERSION 1,0,0,1
 PRODUCTVERSION 1,0,0,1
 FILEFLAGSMASK 0x3fL
#ifdef _DEBUG
 FILEFLAGS 0x1L
#else
 FILEFLAGS 0x0L
#endif
 FILEOS 0x40004L
 FILETYPE 0x1L
 FILESUBTYPE 0x0L
BEGIN
    BLOCK "StringFileInfo"
    BEGIN
        BLOCK "040904b0"
        BEGIN
            VALUE "CompanyName", "Security Tool"
            VALUE "FileDescription", "Phishing Detection Tool"
            VALUE "FileVersion", "1.0.0.1"
            VALUE "InternalName", "phishing.exe"
            VALUE "LegalCopyright", "Copyright (C) 2025"
            VALUE "OriginalFilename", "phishing.exe"
            VALUE "ProductName", "Phishing Detection"
            VALUE "ProductVersion", "1.0.0.1"
        END
    END
    BLOCK "VarFileInfo"
    BEGIN
        VALUE "Translation", 0x409, 1200
    END
END

IDI_ICON1 ICON "icon.ico"
"@ | Out-File -FilePath "resource.rc" -Encoding utf8
        }
        
        if (-not (Test-Path "icon.ico")) {
          # Create a minimal 16x16 ico file
          $iconBytes = [System.Convert]::FromBase64String("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC9vb0Avb29AL29vQC9vb0Avb29AL29vQC9vb0Avb29AL29vQC9vb0AAAAAAAAAAAAAAAAAAAAAAL29vQC9vb0Avb29Bb29vSG9vb0vvb29OL29vTi9vb0vvb29Ib29vQW9vb0Avb29AAAAAAAAAAAAAAAAAP///wD///8A////FP///3T///+1////zP///8z///+1////dP///xT///8A////AAAAAAAAAAAAAAAAAAAAAAD///8A////AP///xT///+E////4f////////7////h////hP///xT///8A////AAAAAAAAAAAAAAAAAAAAAAD///8A////AP///wD///9Q////6v//////////6v///1D///8A////AP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wD///8A////AP///1D////q/////////+r///9Q////AP///wD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AP///wD///9Q////6v/////////q////UP///wD///8A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////UP////D/////////8P///1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////f//////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////3t7e/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////9LS0v8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////+np6f/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////W1tb/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///5T///+UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=")
          [System.IO.File]::WriteAllBytes("icon.ico", $iconBytes)
        }

    - name: Compile resource file
      shell: pwsh
      run: |
        windres -i resource.rc -o resource.o
        if (Test-Path resource.o) {
          Write-Host "Resource file compiled successfully"
        } else {
          Write-Host "Resource file compilation failed"
          exit 1
        }

    - name: Compile Application
      shell: pwsh
      run: |
        $compileCommand = @"
        gcc main.c resource.o -o phishing.exe `
          -I"${{ env.GTK_INCLUDE }}" `
          -I"${{ env.GLIB_INCLUDE }}" `
          -I"${{ env.GLIB_LIB_INCLUDE }}" `
          -I"C:\vcpkg\installed\x64-windows\include" `
          -I"${{ env.GTK_DIR }}\include\cairo" `
          -I"${{ env.GTK_DIR }}\include\pango-1.0" `
          -I"${{ env.GTK_DIR }}\include\atk-1.0" `
          -I"${{ env.GTK_DIR }}\include\gdk-pixbuf-2.0" `
          -L"${{ env.GTK_LIB_DIR }}" `
          -L"C:\vcpkg\installed\x64-windows\lib" `
          -L"${{ env.GTK_DIR }}\bin" `
          -lgtk-3 -lgobject-2.0 -lglib-2.0 -lgio-2.0 -lgdk-3 -lgdk_pixbuf-2.0 -lcairo -lpango-1.0 -lpangocairo-1.0 `
          -lcurl -ljson-c `
          -mwindows -Wl,-subsystem,windows
        "@
        
        Write-Host "Compile command: $compileCommand"
        Invoke-Expression $compileCommand
        
        if (Test-Path "phishing.exe") {
          Write-Host "phishing.exe created successfully"
        } else {
          Write-Host "Failed to create phishing.exe"
          exit 1
        }

    - name: Create artifacts directory
      shell: pwsh
      run: |
        New-Item -Path "${{ github.workspace }}\artifacts" -ItemType Directory -Force
        Copy-Item -Path "phishing.exe" -Destination "${{ github.workspace }}\artifacts\" -Force

    - name: Commit and Push phishing.exe
      shell: pwsh
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        
        # Create build directory if it doesn't exist
        New-Item -Path "build" -ItemType Directory -Force
        
        # Copy the compiled executable to the build directory
        Copy-Item -Path "phishing.exe" -Destination "build\phishing.exe" -Force
        
        # Add the file to git
        git add build/phishing.exe
        
        # Check if there are changes to commit
        $status = git status --porcelain
        if ($status) {
          git commit -m "Auto-commit: Add compiled phishing.exe"
          git push
        } else {
          Write-Host "No changes to commit"
        }

    - name: Create Release Body
      id: release_body
      shell: pwsh
      run: |
        $body = @"
        ## Entropy-Based Malicious File Detection
        
        ### Implemented Algorithms
        
        **Shannon Entropy**:
        $$ H_{\theta}(x) = \sum_{i=1}^{n} p(x_i) \log_{\theta} \frac{1}{p(x_i)} $$
        
        **Renyi Entropy**:
        $$ H_{\theta}(x) = \frac{1}{1-\theta} \log_{\theta} \left(\sum_{i=1}^{n} p(x_i)^\theta\right) $$
        
        **Tsallis Entropy**:
        $$ H_{\theta}(x) = \frac{1}{1-\theta} \left(\sum_{i=1}^{n} p(x_i)^\theta - 1\right) $$
        
        ### Key Features
        - Hybrid entropy analysis (Shannon + Renyi + Tsallis)
        - Header entropy validation (256 bytes)
        - Ransomware pattern detection
        - GUI interface with GTK
        - Auto-update mechanism
        
        Based on: *Entropy Based Method for Malicious File Detection*  
        Journal of Informatics Visualization, 6(4) 856-861
        "@
        
        $escapedBody = $body -replace '%', '%25' -replace "`n", '%0A' -replace "`r", '' -replace '`', "''"
        echo "body=$escapedBody" >> $env:GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: phishing.exe
        body: ${{ steps.release_body.outputs.body }}
        tag_name: ${{ github.ref }}
        name: "v${{ github.ref_name }} Release"
