name: Build C Project
on:
  schedule:
    - cron: '*/5 * * * *' # Menjalankan setiap 5 menit (format yang benar)
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write # Memberikan izin eksplisit untuk menulis ke repositori
    steps:
    # Langkah 1: Checkout repository dengan versi terbaru
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Mengambil semua history untuk commit dan push
    
    # Langkah 2: Install Chocolatey
    - name: Install Chocolatey
      shell: pwsh
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
        Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
    
    # Langkah 3: Install MinGW menggunakan Chocolatey
    - name: Install MinGW
      shell: pwsh
      run: |
        choco install mingw -y
    
    # Langkah 4: Set PATH untuk MinGW
    - name: Set PATH for MinGW
      shell: pwsh
      run: |
        echo "C:\tools\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    
    - name: Check resource compilation
      shell: pwsh
      run: |
        # Kompilasi resource file secara eksplisit
        windres -i resource.rc -o resource.o
        # Cek apakah file berhasil dibuat
        if (Test-Path resource.o) {
          Write-Host "Resource compiled successfully"
        } else {
          Write-Host "Resource compilation failed"
          exit 1
        }

    - name: Install Resource Hacker (optional)
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "http://www.angusj.com/resourcehacker/resource_hacker.zip" -OutFile "reshacker.zip"
        Expand-Archive -Path "reshacker.zip" -DestinationPath "reshacker"
        
    - name: Verify with Resource Hacker
      shell: pwsh
      run: |
        .\reshacker\ResourceHacker.exe -open phishing.exe -save info.txt -action extract -mask "VERSIONINFO,," -log
        Get-Content info.txt
    
    - name: Ensure resource.rc is tracked
      shell: pwsh
      run: |
        git add -f resource.rc
        git status
    
    - name: Verify resources integration
      shell: pwsh
      run: |
        # Gunakan script PowerShell untuk memeriksa resource
        $output = & dumpbin /RESOURCES phishing.exe
        if ($output -match "StringFileInfo") {
          Write-Host "Resources integrated successfully"
        } else {
          Write-Host "Resources may not be properly integrated"
          Write-Host $output
        }
    
    # Langkah 5: Compile kode C dan resource
    - name: Compile C code
      run: |
        make
    
    # Langkah 6: Simpan output sebagai artifact tanpa menggunakan actions/upload-artifact
    - name: Create artifacts directory
      shell: pwsh
      run: |
        New-Item -Path "${{ github.workspace }}\artifacts" -ItemType Directory -Force
        Copy-Item -Path "phishing.exe" -Destination "${{ github.workspace }}\artifacts\" -Force
    
    # Langkah 7: Commit dan push file phishing.exe ke repositori
    - name: Commit and Push phishing.exe
      shell: pwsh
      run: |
        # Konfigurasi git
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        
        # Buat direktori build jika belum ada
        New-Item -Path "build" -ItemType Directory -Force
        
        # Pindahkan file ke direktori build
        Copy-Item -Path "phishing.exe" -Destination "build\phishing.exe" -Force
        
        # Stage file
        git add build/phishing.exe
        
        # Commit perubahan dengan sintaks PowerShell yang benar
        $hasChanges = git diff --cached --quiet
        if ($LASTEXITCODE -ne 0) {
          git commit -m "Auto-commit: Add compiled phishing.exe"
          git push
        } else {
          Write-Host "No changes to commit"
        }
